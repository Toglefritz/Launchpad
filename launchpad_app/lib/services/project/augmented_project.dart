import 'package:firebase_app_check/firebase_app_check.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:launchpad_app/extensions/json_typedef.dart';
import 'package:launchpad_app/services/firebase_remote_config/remote_config_service.dart';
import 'package:launchpad_app/services/image_generation/image_generation_service.dart';
import 'package:launchpad_app/services/image_generation/models/generated_image.dart';
import 'package:launchpad_app/services/project/models/how_to_step.dart';
import 'package:launchpad_app/services/project/models/how_to_supply.dart';
import 'package:launchpad_app/services/project/models/how_to_tip.dart';
import 'package:launchpad_app/services/project/models/how_to_tool.dart';
import 'package:launchpad_app/services/project/project.dart';

/// Represents a project, derived from a [Project] object, that is augmented with additional data.
///
/// The [Project] class represents a project generated by an AI system from JSON conforming to the HowTo schema from
/// schema.org. This class represents an extension of that class, with additional data that is not part of the HowTo
/// schema. This class is used to represent projects that have been augmented with additional data, such as images
/// and links to sites from which tools and materials can be purchased. This additional data is used to enhance the
/// user experience when viewing the project by providing a richer project description.
// ignore_for_file: always_put_required_named_parameters_first
class AugmentedProject extends Project {
  /// The URL of an image representing the project. This image is created using generative AI services.
  final GeneratedImage? projectImage;

  /// Creates an instance of [AugmentedProject].
  AugmentedProject._({
    required super.name,
    required super.description,
    required super.steps,
    required super.raw,
    super.tools,
    super.supplies,
    super.tips,
    required this.projectImage,
  });

  /// Returns an instance of [AugmentedProject] from a [Project] by making additional calls to asynchronous services.
  ///
  /// This method plays a similar role to a factory constructor, but it is asynchronous and makes additional calls to
  /// services to augment the project with additional data. This method is used to create an instance of
  /// [AugmentedProject] from a [Project] object by making additional calls to services to augment the project with
  /// additional data.
  static Future<AugmentedProject> fromProject(Project project) async {
    // The Firebase Remote Config service is used to configure various options for project augmentation.
    final RemoteConfigService remoteConfigService = RemoteConfigService();

    // Get an image for the project, as long as the capability is enabled in Firebase Remote Config.
    final GeneratedImage? projectImage;
    if (remoteConfigService.shouldGenerateCoverImages()) {
      // If the capability is enabled, get an image for the project.
      projectImage = await _getProjectImage(project);
    } else {
      // If the capability is disabled, set the project image to null.
      projectImage = null;
    }

    // Construct the augmented project.
    return AugmentedProject._(
      name: project.name,
      description: project.description,
      steps: project.steps,
      raw: project.raw,
      tools: project.tools,
      supplies: project.supplies,
      tips: project.tips,
      projectImage: projectImage,
    );
  }

  /// Gets an image representing the project using generative AI services.
  static Future<GeneratedImage?> _getProjectImage(Project project) async {
    try {
      // Create a prompt for the image generation service based on the project contents.
      final String prompt = ImageGenerationService.buildPromptFromProject(project);

      // Get the current user.
      final User? user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        throw Exception('User is null');
      }

      // Get the App Check token.
      final String? appCheckToken = await FirebaseAppCheck.instance.getToken();
      if (appCheckToken == null || appCheckToken.isEmpty) {
        throw Exception('App Check token is null');
      }

      // Get an image for the project using generative AI services.
      final GeneratedImage projectImage = await ImageGenerationService.generateImage(
        user: user,
        appCheckToken: appCheckToken,
        prompt: prompt,
      );

      return projectImage;
    } catch (e) {
      debugPrint('Failed to generate image for project with exception, $e');

      return null;
    }
  }

  /// A convenience getter for the project image URL.
  String? get projectImageUrl => projectImage?.data.imageUrl;

  /// Returns an [AugmentedProject] object from a JSON object.
  ///
  /// This factory constructor is typically used when retrieving a project from the Launchpad Firestore backend. The
  /// JSON objects returned from the backend are in an extended format based on the HowTo schema from schema.org. The
  /// standard schema has been augmented with additional fields, such as the project image URL.
  factory AugmentedProject.fromJson(JSONObject json) {
    // Create a Project object from the JSON object.
    final Project project = Project.fromJson(json);

    // Get the project image from the JSON object.
    final JSONObject? projectImageJson = json['projectImage'] as JSONObject?;
    final GeneratedImage? projectImage = projectImageJson != null ? GeneratedImage.fromJson(projectImageJson) : null;

    // Create an AugmentedProject object from the Project object.
    return AugmentedProject._(
      name: project.name,
      description: project.description,
      steps: project.steps,
      raw: project.raw,
      tools: project.tools,
      supplies: project.supplies,
      tips: project.tips,
      projectImage: projectImage,
    );
  }

  /// Creates a JSON representation of the augmented project. This JSON object is an extended version of the HowTo
  /// schema from schema.org. In addition to the fields defined for the HowTo schema, this JSON object includes the
  /// project image URL.
  JSONObject toJson() {
    final JSONObject json = super.raw;

    // Add the project image URL to the JSON object.
    json['projectImage'] = projectImage?.toJson();

    return json;
  }

  /// Creates a copy of this [AugmentedProject] with the given fields replaced with new values.
  ///
  /// This method is used to create a new [AugmentedProject] object with the same values as this object, except for the
  /// fields that are passed as arguments. This method is useful when updating the project data in the database.
  AugmentedProject copyWith({
    String? name,
    String? description,
    List<HowToStep>? steps,
    JSONObject? raw,
    List<HowToTool>? tools,
    List<HowToSupply>? supplies,
    List<HowToTip>? tips,
    GeneratedImage? projectImage,
  }) {
    return AugmentedProject._(
      name: name ?? this.name,
      description: description ?? this.description,
      steps: steps ?? this.steps,
      raw: raw ?? this.raw,
      tools: tools ?? this.tools,
      supplies: supplies ?? this.supplies,
      tips: tips ?? this.tips,
      projectImage: projectImage ?? this.projectImage,
    );
  }
}
