const functions = require('firebase-functions');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { getStorage } = require('firebase-admin/storage');

/**
 * @brief Generates an image using the OpenAI DALL-E 3 API based on the provided
 * prompt.
 *
 * This function sends a POST request to the OpenAI API to generate an image.
 * Assuming the request is successful, the function will receive a response
 * containing a URL to the generated image, which will be stored in a blob
 * storage container. The images generated by DALL-E 3 are only available for a
 * limited time, around an hour. Therefore, this function will download the 
 * generated image from the URL provided in the response from the DALL-E 3 API
 * and then upload it to a Firebase Storage bucket for long-term storage.
 * The function creates a bucket in Firebase Storage with a name matching the
 * user ID and stores the image in that bucket. Finally, the function returns
 * the name of the image file in the bucket to the client.
 * 
 * When the client later requests the image, a different endpoint will be used
 * to retrieve the image from the Firebase Storage bucket and return it to the
 * client.
 * 
 * The function handles errors by logging them and throwing the error to be 
 * handled by the caller.
 *
 * @param {string} prompt The text prompt to generate the image.
 * @return {Promise<Object>} A promise that resolves to the response data
 * containing the generated image name.
 *
 * @throws {Error} Throws an error if the API request fails.
 *
 * @see https://platform.openai.com/docs/guides/images/usage?lang=curl
 */

/**
 * Successful response from the OpenAI API:
 * 
 * @code
 * {
 *   "created": 1721699361,
 *   "data": [
 *       {
 *           "revised_prompt": "A detailed visual representation of a snack typically enjoyed, but with an unusual twist. Imagine a stack of printed circuit boards (PCBs), usually found in electronic devices, arranged on a plate. The green and copper patterns of the circuit boards create a fascinating texture. Next to the PCBs, imagine a vibrant, freshly made salsa in a small bowl. The salsa has a notable contrast with red tomatoes, green cilantro, diced onions and jalapenos, and it is topped off with a drizzle of lime. Let this unusual but interesting snack combination come to life.",
 *           "url": "https://oaidalleapiprodscus.blob.core.windows.net/private/org-8hMnm06D7WpvdLPOS6a3DzbK/launchpad-demo/img-rd1AEDVmo8fFgQUq96eeVxsg.png?st=2024-07-23T00%3A49%3A21Z&se=2024-07-23T02%3A49%3A21Z&sp=r&sv=2023-11-03&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-07-23T00%3A14%3A55Z&ske=2024-07-24T00%3A14%3A55Z&sks=b&skv=2023-11-03&sig=1B8kBWNPrnGNII6UxOvLQH%2Bb4scvmaVV52R8uqG79dc%3D"
 *       }
 *   ]
 * }
 * 
 */

/**
 * Example response from this function:
 * 
 * @code
 * {
 *  "imageUrl": "https://firebasestorage.googleapis.com/v0/b/launchpad-demo.appspot.com/o/12345678%2Fb1b2c3d4-5678-90ab-cdef-0123456789ab.png?alt=media&token=12345678
 * }
 * 
 */

// TODO(Toglefritz): Convert this call to use Gemini when the API is available.
exports.generateImage = async (req, res) => {
  // Get the prompt from the request body.
  const { prompt } = req.body;
  if (!prompt) {
    return res.status(400).send('Bad Request: Missing prompt');
  }

  // Get the user ID to be used asn the name of the folder in which the 
  // image will be stored.
  const userId = process.env.FUNCTIONS_EMULATOR === 'true' ? req.body.userId : req.user.uid;
  if (!userId) {
    return res.status(400).send('Bad Request: Missing user ID');
  }

  // Retrieve the OpenAI API key from Firebase Functions config.
  const key = functions.config().openai.key;

  // The URL for the OpenAI API Generations API.
  const url = 'https://api.openai.com/v1/images/generations';

  try {
    // Perform the POST request to the Generations API.
    const response = await axios.post(
      url,
      {
        model: "dall-e-3",
        prompt: prompt,
        n: 1
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${key}`
        }
      }
    );

    // A 200 status means the search was successful
    if (response.status === 200) {
      // Get the URL of the generated image from the Open AI response.
      const imageUrl = response.data.data[0].url;

      // Store the image in Firebase Storage and get the download URL.
      const fileName = await storeImageInFirebaseStorage(imageUrl, userId);

      // Send the download URL to the client.
      res.status(200).send({ fileName: fileName });
    } else {
      // Handle non-200 statuses by sending an error message
      res.status(response.status).send(`Failed to generate image with status, ${response.status}, and message, ${response.data}`);
    }
  } catch (error) {
    // Handle errors in the request
    console.error('Error generating image:', error);
    res.status(500).send(`Image generation failed with exception, ${error.message}`);
  }
}


/**
 * @brief Stores an image in Firebase Storage.
 * 
 * This function downloads an image from a given URL and uploads it to a
 * Firebase Storage bucket. The function generates a unique file name for the
 * image and stores it in a folder named after the user ID. The function then
 * returns the download URL for the stored image.
 *
 * @param {string} imageUrl - The URL of the image to be stored.
 * @param {string} userId - The ID of the user associated with the image.
 * @returns {Promise<string>} - A promise that resolves to the download URL of
 * the stored image.
 * @throws {Error} - If there is an error storing the image in Firebase Storage.
 */
async function storeImageInFirebaseStorage(imageUrl, userId) {
  try {
    // Download the image from the Azure blob container
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });

    // Generate a unique file name for the image
    const fileName = `${uuidv4()}.png`;

    // Initialize Firebase Storage and create a reference
    const bucket = getStorage().bucket();

    // Create a reference to the file in the bucket
    const file = bucket.file(`${userId}/${fileName}`);

    // Upload the image buffer to Firebase Storage
    await file.save(response.data);

    return fileName;
  } catch (error) {
    console.error('Error storing image in Firebase Storage:', error);
    throw new Error('Failed to store image in Firebase Storage');
  }
}

/**
 * @brief Retrieves an image from Firebase Storage.
 * 
 * This function retrieves an image from a Firebase Storage bucket based on the
 * provided file name. The function generates a download URL for the image and
 * returns it to the client.
 * 
 * @note The ability to generate signed download URLs is not currently supported
 * in the Firebase Emulator Suite. In the emulator, the function constructs a
 * local URL to the image file.
 * 
 * @param {Object} req - The HTTP request object containing the file name in
 * the query parameters.
 * @param {Object} res - The HTTP response object.
 * @returns {Promise<void>} - A promise that resolves when the image is
 * retrieved and sent to the client.
 * @throws {Error} - If there is an error retrieving the image from Firebase 
 * Storage.
 */
exports.getImage = async (req, res) => {
  try {
    // Extract the file name from the query parameters
    const { fileName } = req.query;

    // Get the user ID from the request body or the user object
    const userId = process.env.FUNCTIONS_EMULATOR === 'true' ? req.body.userId : req.user.uid;

    if (!fileName) {
      res.status(400).send('Bad Request: fileName is required.');
      return;
    }

    let url;
    // If running in the emulator, construct a local emulator URL
    if (process.env.FUNCTIONS_EMULATOR === 'true') {
      // If running in the emulator, construct a local emulator URL
      url = `http://127.0.0.1:9199/v0/b/launchpad-d344d.appspot.com/o/${userId}%2f${fileName}?alt=media`;
    } 
    // Otherwise, generate a signed URL for the image
    else {
      // Initialize Firebase Storage and create a reference
      const bucket = getStorage().bucket();

      // Create a reference to the file in the bucket
      const file = bucket.file(`${userId}/${fileName}`);

      // Generate a signed URL for the file
      [url] = await file.getSignedUrl({
        action: 'read',
        expires: Date.now() + 60 * 60 * 1000, // 1 hour
      });
    }

    // Redirect the client to the appropriate URL
    res.redirect(url);
  } catch (error) {
    console.error('Error getting image from Firebase Storage:', error);
    res.status(500).send('Internal Server Error');
  }
}